#+BEGIN_SRC emacs-lisp
(use-package emacs
  :preface
  (defvar anhmv/indent-width 4)
  :config
  (setq frame-title-format '("Anh Mac")
    ring-bell-function 'ignore
    frame-resize-pixelwise t
    default-directory "~/"
  )

  (tool-bar-mode -1) (menu-bar-mode -1)

  ;; better scrolling experience
  (setq scroll-margin 0
    scroll-conservatively 101 > 100
    scroll-preserve-screen-position t
    auto-window-vscroll nil)

  ;; always use spaces for indentation
  (setq-default indent-tabs-mode nil
        tab-width anhmv/indent-width))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . visual-line-mode))

(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
     ("\\.css\\'"   . web-mode)
     ("\\.jsx?\\'"  . web-mode)
     ("\\.tsx?\\'"  . web-mode)
     ("\\.json\\'"  . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2) ; HTML
  (setq web-mode-css-indent-offset 2)    ; CSS
  (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
  (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package "startup"
  :ensure nil
  :config (setq inhibit-startup-screen t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq evil-want-C-i-jump nil)
(use-package "evil"
  :ensure t ;; install the evil package if not install
  :init
  (setq evil-want-keybinding nil)
  :config  ;; tweak evil after loading it
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-company-use-tng nil)
  (evil-collection-init))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package sublime-themes
  :ensure t
  :config
  ;; Global settings (default)
  ;; (setq doom-themes-enable-bold t
  ;;      doom-themes-enable-italic t)
  (load-theme 'hickey t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
  (powerline-default-theme))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (before-save . whitespace-cleanup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook (prog-mode . electric-pair-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :config (column-number-mode +1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-project-search-path '(
    "/Volumes/WIP/projects/bespokify/source",
    "/Volumes/WIP/projects/pistachio",
    "/Volumes/WIP/study"
  ))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :config (add-hook 'with-editor-mode-hook #'evil-insert-state)
)

(use-package evil-magit
  :ensure t
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package vue-mode
  :ensure t
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package neotree
  :ensure t
  :config
  (global-set-key (kbd "C-c n") 'neotree-toggle)
)
(use-package all-the-icons)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  :demand
  :preface
  (require 'helm-config)
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x b" . helm-buffers-list))
  :config
  (helm-mode 1)
)

(use-package helm-projectile
  :ensure t
)

(use-package helm-ag
  :ensure t
  :config
  (custom-set-variables
   '(helm-ag-base-command "rg --no-heading --ignore-files --no-hidden")
   `(helm-ag-success-exit-status '(0 2)))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package deft
  :ensure t
  :config
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq deft-directory "~/.deft")
  (setq deft-recursive t)
  (setq deft-auto-save-interval nil)
  (global-set-key (kbd "C-c d") 'deft)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hood
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package restclient)

(defvar my-leader-map (make-sparse-keymap)
  "Keymap for \"leader key\" shortcuts.")

;; binding "," to the keymap
(define-key evil-normal-state-map "," my-leader-map)

(define-key my-leader-map "b" 'helm-buffers-list)
(define-key my-leader-map "f" 'helm-projectile-find-file)
(define-key my-leader-map "g" 'helm-do-ag-project-root)
(define-key my-leader-map "n" 'neotree-toggle)
#+END_SRC
